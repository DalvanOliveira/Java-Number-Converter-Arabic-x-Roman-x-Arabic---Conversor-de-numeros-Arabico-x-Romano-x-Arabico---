/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Control.ControladorConversor;
import Model.DadoEstatistico;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dalvan
 */
public class TelaConversor extends javax.swing.JFrame {

    /**
     * Creates new form TelaConversor
     */
    public TelaConversor () {
        initComponents ();
        carregarJTable();
    }
    
    ControladorConversor controlador = ControladorConversor.getInstance ();
    
    private void carregarJTable() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ROMANO" );
        modelo.addColumn ("ARABICO");
        modelo.addColumn ("I");
        modelo.addColumn ("V");
        modelo.addColumn ("X");
        modelo.addColumn ("L");
        modelo.addColumn ("D");
        modelo.addColumn ("C");
        modelo.addColumn ("M");
        
        //aqui será feito a inserção dos dados na tabela
        for(DadoEstatistico dadoEstatistico: controlador.getLinhas ()){
            modelo.addRow (new String [] {
            dadoEstatistico.getNumeroArabico (), 
            dadoEstatistico.getAlgRomano (),
            dadoEstatistico.getI (),
            dadoEstatistico.getV (),
            dadoEstatistico.getX (),
            dadoEstatistico.getL (),
            dadoEstatistico.getC (),
            dadoEstatistico.getD (),
            dadoEstatistico.getM ()});
        }
        jTable2.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings ("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Conversor de números: Arábico x Romano");

        jButton1.setText("Adicionar a lista");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Digite um número arábico ou romano");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel3)
                        .addGap(45, 45, 45)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(jLabel2)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(24, 24, 24))
        );

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ROMANO", "ARABICO", "I", "V", "X", "L", "C", "D", "M"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel1.setText("Dados Estatísticos");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(197, 197, 197)
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here: Botão adicionar número
        //Salva texto digitado pelo usuário removendo espaços
        String textoEntradaString = jTextField1.getText().replaceAll (" ", "");
        //deixa todo texto em maisculo
        textoEntradaString = textoEntradaString.toUpperCase ();
        //verifica se a entrada é vazia
        if (textoEntradaString.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nenhuma informação digitada!", "Converter números", JOptionPane.INFORMATION_MESSAGE,null );
        }else{
            //verifica se entrada é número inteiro
            if(textoEntradaString.matches("[0-9]*")){
                //é numero inteiro agora falta verificar se eh positivo não nulo e menor ou igual a 3888
                int numeroInteiro = Integer.parseInt(textoEntradaString);
                if( (numeroInteiro<=0) || (3999 < numeroInteiro) ){
                    JOptionPane.showMessageDialog(this, "Numero fora do interlado [1,3999]  permitido! Digite novamente.", "Converter números", JOptionPane.INFORMATION_MESSAGE,null );
                }else{
                    //numero inteiro valido, fazer a conversão e inserir na lista
                    //JOptionPane.showMessageDialog(this, "Numero inteiro validos", "Converter números", JOptionPane.INFORMATION_MESSAGE,null );
                    
                    String varUnidades[] = {"","I","II","III","IV","V","VI","VII","VIII","IX"};
                    String varDezenas[] = {"","X","XX","XXX","XL","L","LX","LXX","LXXX","XC"}; 
                    String varCentenas[] = {"","C","CC","CCC","CD","D","DC","DCC","DCCC","CM"};
                    String varMilhar[] = {"","M","MM","MMM"};
                    
                    int a,b,c,d;
                    
                    String a1, b1, c1, d1;
                    
                    a = numeroInteiro/1000;
                    b = (numeroInteiro%1000)/100;
                    c = ((numeroInteiro%1000)%100)/10;
                    d = ((numeroInteiro%1000)%100)%10;
                    
                    d1 = varUnidades[d];
                    c1 = varDezenas[c];
                    b1 = varCentenas[b];
                    a1 = varMilhar[a];
                    
                    //Adicionar numero arabico, romano e contagem à lista
                    DadoEstatistico dadoEstatistico = new DadoEstatistico (
                            Integer.toString (numeroInteiro), 
                            a1+b1+c1+d1,
                            Integer.toString (conta_ocorrencias ('I', a1+b1+c1+d1)),
                            Integer.toString (conta_ocorrencias ('V', a1+b1+c1+d1)), 
                            Integer.toString (conta_ocorrencias ('X', a1+b1+c1+d1)),
                            Integer.toString (conta_ocorrencias ('L', a1+b1+c1+d1)),
                            Integer.toString (conta_ocorrencias ('C', a1+b1+c1+d1)),
                            Integer.toString (conta_ocorrencias ('D', a1+b1+c1+d1)), 
                            Integer.toString (conta_ocorrencias ('M', a1+b1+c1+d1)));
                    controlador.addLinha (dadoEstatistico);
                    
                    //carregar Jtable
                    carregarJTable();
                    //mostra mensagem de sucesso ao usuário
                    JOptionPane.showMessageDialog(this, "Numero " +numeroInteiro+ " convertido para " +a1+b1+c1+d1+ " e adicionado a lista.", "Converter números", JOptionPane.INFORMATION_MESSAGE,null );
                }
            // nao eh inteiro
            }else{
                ///////////fazer as validações para o numero no formato romano////////////////
                //falta validações de repetição, entre outras.
                for (int i = 0; i < textoEntradaString.length (); i++) {
                    //char c = textoEntradaString.charAt (i);
                    //String s = Character.toString (c);
                    if(!(Character.toString (textoEntradaString.charAt (i)).matches("[IVXLCDM]"))){
                        //caracter nao pertence ao conjunto {IVXLCDM}
                       JOptionPane.showMessageDialog(this, "Possui caracteres que nao pertence ao conjunto: {IVXLCDM}", "Converter números", JOptionPane.INFORMATION_MESSAGE,null );
                       return;
                    } 
                }
                //numero romano no formato aceito, iniciar conversão e inclusão
                int vetorInteiros[] = new int[10];
                for (int i = 0; i < textoEntradaString.length (); i++) {
                    if(textoEntradaString.charAt (i)=='I'){
                        vetorInteiros[i] = 1;
                    }else if(textoEntradaString.charAt (i)=='V'){
                        vetorInteiros[i] = 5;
                    }else if(textoEntradaString.charAt (i)=='X'){
                        vetorInteiros[i] = 10;
                    }else if(textoEntradaString.charAt (i)=='L'){
                        vetorInteiros[i] = 50;
                    }else if(textoEntradaString.charAt (i)=='C'){
                        vetorInteiros[i] = 100;
                    }else if(textoEntradaString.charAt (i)=='D'){
                        vetorInteiros[i] = 500;
                    }else if(textoEntradaString.charAt (i)=='M'){
                        vetorInteiros[i] = 1000;
                    }else{
                        //else redundante, pois já foi verificado no for anterior
                        JOptionPane.showMessageDialog(this, "Possui caracteres que nao pertence ao conjunto: {IVXLCDM}", "Converter números", JOptionPane.INFORMATION_MESSAGE,null );
                       return;
                    }
                }
                //vetor com os algoritmos romanos convertidos para inteiro carregado
                
                //acumulador inicializado com valor da ultima posição do vetor de valores convertidos
                int acumulador = vetorInteiros[textoEntradaString.length () -1];
                //iteracao da direita para esquerda no vetorde valores convertidos
                for(int i = (textoEntradaString.length () -1); i>0;i-- ){
                    if(vetorInteiros[i] > vetorInteiros[i-1]){
                        acumulador = acumulador -  vetorInteiros[i-1];
                    }
                    else if((vetorInteiros[i] == vetorInteiros[i-1])||(vetorInteiros[i] < vetorInteiros[i-1]) ){
                        acumulador = acumulador+ vetorInteiros[i-1];
                    }
                }
                
                
                /////////falta inserir na lista/////////
                //Adicionar numero arabico, romano e contagem à lista
                DadoEstatistico dadoEstatistico = new DadoEstatistico (
                    Integer.toString (acumulador), 
                    textoEntradaString,
                    Integer.toString (conta_ocorrencias ('I', textoEntradaString)),
                    Integer.toString (conta_ocorrencias ('V', textoEntradaString)), 
                    Integer.toString (conta_ocorrencias ('X', textoEntradaString)),
                    Integer.toString (conta_ocorrencias ('L', textoEntradaString)),
                    Integer.toString (conta_ocorrencias ('C', textoEntradaString)),
                    Integer.toString (conta_ocorrencias ('D', textoEntradaString)), 
                    Integer.toString (conta_ocorrencias ('M', textoEntradaString)));
                controlador.addLinha (dadoEstatistico);

                //carregar Jtable
                carregarJTable();
                //mostra mensagem de sucesso ao usuário
                JOptionPane.showMessageDialog(this, "Numero romano: " +textoEntradaString+ " Convertido para: " + acumulador+ " e adicionado a lista", "Converter números", JOptionPane.INFORMATION_MESSAGE,null );
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public static int conta_ocorrencias(char caracter ,String str){
        int count=0;
        for (int i=0;i<str.length();i++){
            if(str.charAt(i)==caracter){
                count++;
            }
        }
        return count;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main (String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels ()) {
                if ("Nimbus".equals (info.getName ())) {
                    javax.swing.UIManager.setLookAndFeel (info.getClassName ());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger (TelaConversor.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger (TelaConversor.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger (TelaConversor.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger (TelaConversor.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater (new Runnable () {
            public void run () {
                new TelaConversor ().setVisible (true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
